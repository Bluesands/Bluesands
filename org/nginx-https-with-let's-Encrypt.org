#+STYLE: <link rel="stylesheet" type="text/css" href="https://raw.github.com/wd/org-info-js/master/stylesheet.css" />
#+INFOJS_OPT: path:https://raw.github.com/wd/org-info-js/master/org-info.js
#+INFOJS_OPT: toc:t localtoc:t view:info mouse:underline buttons:nil
#+TITLE: nginx https with let's Encrypt

	Note: this article just work on Centos 7 system.
*** nginx install or check

    if your system has not installed nginx, you should install it first.
    Centos 7 system can install nginx package from Centos repository.
    1. Install the EPEL repository:
       #+BEGIN_SRC shell
         sudo yum install epel-release
       #+END_SRC
    2. Install nginx
       #+BEGIN_SRC shell
         sudo yum install nginx
       #+END_SRC
    3. check your nginx
       if your system had installed nginx, you should check whether it supports http_ssl_module.
       #+BEGIN_SRC shell
         nginx -V | grep ssl

         --with-http_ssl_module
       #+END_SRC
       if not has "--with-http ssl module", you should install nginx from EPEL.
    
    Note: For more installation information please see [[https://www.nginx.com/resources/admin-guide/installing-nginx-open-source][installing-nginx-open-source]] .

*** Install the Cerbot Let's Encrypt Client
    The second step to using Let's Encrypt to obtain an SSL certificate is to install the cerbot
    software on you server.
    The CentOS 7 system can install cerbot package from EPEL.
    #+BEGIN_SRC shell
      sudo yum install cerbot
    #+END_SRC

*** Create your configuration
    1. create a folder to store you configuration
       #+BEGIN_SRC shell
         sudo mkdir /etc/letsencrypt/configs
       #+END_SRC
    2. edit configurate
       #+BEGIN_SRC shell
         sudo vim /etc/letsencrypt/configs/example.com.conf
       #+END_SRC
    3. Configuration file contents
       #+BEGIN_SRC shell
         # write your domain an email
         domains = example.com
         rsa-key-size = 2084
         email = your-email@example.com
         text = True


         # webroot-path is the root path of example.com
         authenticator = webroot
         webroot-path = /root/path/of/example.com
       #+END_SRC
    Note: The above configuration file uses the webroot validation method, which is applicable to situations
    			where there is already a Web Server running. Certbot will automatically create a hidden file under 
    			/root/path/of/example.com .well-known/acme-challenge, by asking this file to verify that example.com dose
    			belong to you. The external network server accesses http://www.example.com/.well-known/acme-challenge and
    verifies OK if the access is successful.

*** Automatically generate certificates
    #+BEGIN_SRC shell
      sudo certbot certonly -c /etc/letsencrypt/configs/example.com.conf
    #+END_SRC
    At the terminal you will see the following:
    #+BEGIN_SRC shell
      IMPORTANT NOTES:
      - Congratulations! Your certificate and chain have been saved at /etc/letsencrypt/live/example.com/fullchain.pem.
    #+END_SRC

*** Add certificates to conf of nginx
   #+BEGIN_SRC shell
     server {
         listen 443 ssl;
         server_name example.com;

         ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
         ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

         ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
         ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:DHE-RSA-AES128-GCM-SHA256:AES256+EDH:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

         ssl_prefer_server_ciphers  on;
         ssl_session_cache shared:SSL:10m;
         ssl_session_timeout 60m;

         #HSTS 策略
         add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
         #减少点击劫持
         add_header X-Frame-Options DENY;
         #禁止服务器自动解析资源类型
         add_header X-Content-Type-Options nosniff;
         #防 XSS 攻擊
         add_header X-Xss-Protection 1;

         root /root/path/to/example.com;
         index index.html index.htm;
     }

     server {
         listen 80;
         server_name example.com;
         return 301 https://$server_name$request_uri;
     }
   #+END_SRC
   Note: More ssl configuration of nginx, you can see [[https://mozilla.github.io/server-side-tls/ssl-config-generator/][Mozilla SSl Configuraion Generator]]

*** Reload nginx
    #+BEGIN_SRC shell
      sudo nginx -s reload
    #+END_SRC
